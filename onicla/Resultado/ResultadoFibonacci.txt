   1  Function Integer fibonacci(Integer n) Begin
          S = DeclFunction S
          DeclFunction = 'Function' FunctionType NameFunctionId '(' ConstDecl ')' InternalDecl
          [0001, 0009] (0023,              PR_FUNC) {Function}
          Type = 'Integer'
          [0001, 0018] (0029,           PR_INTEGER) {Integer}
          nameFunction = 'id'
          [0001, 0029] (0001,                   ID) {fibonacci}
          [0001, 0031] (0045,               AB_PAR) {(}
          ConstDecl = Type 'id' VectorType ConstDecl_LL
          Type = 'Integer'
          [0001, 0039] (0029,           PR_INTEGER) {Integer}
          [0001, 0042] (0001,                   ID) {n}
          VectorType = epsilon
          [0001, 0044] (0046,              FEC_PAR) {)}
          InternalDecl = 'Begin' Instructions 'End'
          [0001, 0051] (0041,             PR_BEGIN) {Begin}
   2  		If(n < 2) Begin
          Instructions = Command Instructions
          Command = 'PR_IF' '(' Eb ')' InternalDecl IfLL
          [0002, 0005] (0025,                PR_IF) {If}
          [0002, 0007] (0045,               AB_PAR) {(}
          Eb = Tb EbLL
          Tb = Fb TbLL
          Fb = Ra FbLL
          Ra = Ea RaLL
          Ea = Ta EaLL
          Ta = Pa TaLL
          Pa = Fa PaLL
          IdFunctionCall = 'id' IdFunctionCall_LL
          [0002, 0009] (0001,                   ID) {n}
          IdFunctionCall_LL = epsilon
          PaLL = epsilon
          TaLL = epsilon
          EaLL = epsilon
          RaLL = epsilon
          FbLL = 'OP_LESS' Ra FbLL
          [0002, 0012] (0016,              OP_LESS) {<}
          Ra = Ea RaLL
          Ea = Ta EaLL
          Ta = Pa TaLL
          Pa = Fa PaLL
          Fa = 'CTE_INT'
          [0002, 0015] (0003,              CTE_INT) {2}
          PaLL = epsilon
          TaLL = epsilon
          EaLL = epsilon
          RaLL = epsilon
          FbLL = epsilon
          TbLL = epsilon
          EbLL = epsilon
          [0002, 0017] (0046,              FEC_PAR) {)}
          InternalDecl = 'Begin' Instructions 'End'
          [0002, 0024] (0041,             PR_BEGIN) {Begin}
   3  			Refound n;
          Instructions = 'Refound' Return ';'
          [0003, 0011] (0024,           PR_REFOUND) {Refound}
          Refound = Ec
          Ec = Fc EcLL
          Eb = Tb EbLL
          Tb = Fb TbLL
          Fb = Ra FbLL
          Ra = Ea RaLL
          Ea = Ta EaLL
          Ta = Pa TaLL
          Pa = Fa PaLL
          IdFunctionCall = 'id' IdFunctionCall_LL
          [0003, 0014] (0001,                   ID) {n}
          IdFunctionCall_LL = epsilon
          PaLL = epsilon
          TaLL = epsilon
          EaLL = epsilon
          RaLL = epsilon
          FbLL = epsilon
          TbLL = epsilon
          EbLL = epsilon
          EcLL = epsilon
          [0003, 0016] (0049,             TERMINAL) {;}
   4  		End
          [0004, 0006] (0042,               PR_END) {End}
   5  		Else Begin
          IfLL = 'PR_ELSE' InternalDecl
          [0005, 0007] (0026,              PR_ELSE) {Else}
          InternalDecl = 'Begin' Instructions 'End'
          [0005, 0014] (0041,             PR_BEGIN) {Begin}
   6  			Refound fibonacci(n - 1) + fibonacci(n - 2);
          Instructions = 'Refound' Return ';'
          [0006, 0011] (0024,           PR_REFOUND) {Refound}
          Refound = Ec
          Ec = Fc EcLL
          Eb = Tb EbLL
          Tb = Fb TbLL
          Fb = Ra FbLL
          Ra = Ea RaLL
          Ea = Ta EaLL
          Ta = Pa TaLL
          Pa = Fa PaLL
          IdFunctionCall = 'id' IdFunctionCall_LL
          [0006, 0022] (0001,                   ID) {fibonacci}
          IdFunctionCall_LL = '(' ParamFunction ')'
          [0006, 0024] (0045,               AB_PAR) {(}
          ParamFunction = Ec ParamFunctionLL
          Ec = Fc EcLL
          Eb = Tb EbLL
          Tb = Fb TbLL
          Fb = Ra FbLL
          Ra = Ea RaLL
          Ea = Ta EaLL
          Ta = Pa TaLL
          Pa = Fa PaLL
          IdFunctionCall = 'id' IdFunctionCall_LL
          [0006, 0026] (0001,                   ID) {n}
          IdFunctionCall_LL = epsilon
          PaLL = epsilon
          TaLL = epsilon
          EaLL = 'OP_SUB' Ta EaLL
          [0006, 0029] (0010,               OP_SUB) {-}
          Ta = Pa TaLL
          Pa = Fa PaLL
          Fa = 'CTE_INT'
          [0006, 0032] (0003,              CTE_INT) {1}
          PaLL = epsilon
          TaLL = epsilon
          EaLL = epsilon
          RaLL = epsilon
          FbLL = epsilon
          TbLL = epsilon
          EbLL = epsilon
          EcLL = epsilon
          ParamFunctionLL = epsilon
          [0006, 0034] (0046,              FEC_PAR) {)}
          PaLL = epsilon
          TaLL = epsilon
          EaLL = 'OP_AD' Ta EaLL
          [0006, 0037] (0009,                OP_AD) {+}
          Ta = Pa TaLL
          Pa = Fa PaLL
          IdFunctionCall = 'id' IdFunctionCall_LL
          [0006, 0048] (0001,                   ID) {fibonacci}
          IdFunctionCall_LL = '(' ParamFunction ')'
          [0006, 0050] (0045,               AB_PAR) {(}
          ParamFunction = Ec ParamFunctionLL
          Ec = Fc EcLL
          Eb = Tb EbLL
          Tb = Fb TbLL
          Fb = Ra FbLL
          Ra = Ea RaLL
          Ea = Ta EaLL
          Ta = Pa TaLL
          Pa = Fa PaLL
          IdFunctionCall = 'id' IdFunctionCall_LL
          [0006, 0052] (0001,                   ID) {n}
          IdFunctionCall_LL = epsilon
          PaLL = epsilon
          TaLL = epsilon
          EaLL = 'OP_SUB' Ta EaLL
          [0006, 0055] (0010,               OP_SUB) {-}
          Ta = Pa TaLL
          Pa = Fa PaLL
          Fa = 'CTE_INT'
          [0006, 0058] (0003,              CTE_INT) {2}
          PaLL = epsilon
          TaLL = epsilon
          EaLL = epsilon
          RaLL = epsilon
          FbLL = epsilon
          TbLL = epsilon
          EbLL = epsilon
          EcLL = epsilon
          ParamFunctionLL = epsilon
          [0006, 0060] (0046,              FEC_PAR) {)}
          PaLL = epsilon
          TaLL = epsilon
          EaLL = epsilon
          RaLL = epsilon
          FbLL = epsilon
          TbLL = epsilon
          EbLL = epsilon
          EcLL = epsilon
          [0006, 0062] (0049,             TERMINAL) {;}
   7  		End
          [0007, 0006] (0042,               PR_END) {End}
   8  	End
          Instructions = epsilon
          [0008, 0005] (0042,               PR_END) {End}
   9  
  10  	Function Integer Main ( ) Begin
          S = DeclFunction S
          DeclFunction = 'Function' FunctionType NameFunctionId '(' ConstDecl ')' InternalDecl
          [0010, 0010] (0023,              PR_FUNC) {Function}
          Type = 'Integer'
          [0010, 0019] (0029,           PR_INTEGER) {Integer}
          nameFunction = 'main'
          [0010, 0025] (0044,              PR_MAIN) {Main}
          [0010, 0028] (0045,               AB_PAR) {(}
          ConstDecl = epsilon
          [0010, 0031] (0046,              FEC_PAR) {)}
          InternalDecl = 'Begin' Instructions 'End'
          [0010, 0038] (0041,             PR_BEGIN) {Begin}
  11  		Integer n, total;
          Instructions = DeclId Instructions
          DeclId = Type IdLL ';'
          Type = 'Integer'
          [0011, 0010] (0029,           PR_INTEGER) {Integer}
          IdLL = Id '=' Id_LL
          Id = 'id' VectorType
          [0011, 0013] (0001,                   ID) {n}
          VectorType = epsilon
          = = epsilon
          Id_LL = ',' Id '=' Id_LL
          [0011, 0015] (0050,                  SEP) {,}
          Id = 'id' VectorType
          [0011, 0022] (0001,                   ID) {total}
          VectorType = epsilon
          = = epsilon
          Id_LL = epsilon
          [0011, 0024] (0049,             TERMINAL) {;}
  12  		Print('Digite o tamanho da sequencia:');
          Instructions = Command Instructions
          Command = 'print' '(' 'CTE_CADCHA' PrintParam ')' ';'
          [0012, 0008] (0035,             PR_PRINT) {Print}
          [0012, 0010] (0045,               AB_PAR) {(}
          [0012, 0043] (0005,           CTE_CADCHA) {'Digite o tamanho da sequencia:'}
          PrintParam = epsilon
          [0012, 0045] (0046,              FEC_PAR) {)}
          [0012, 0047] (0049,             TERMINAL) {;}
  13  		Input(n);
          Instructions = Command Instructions
          Command = 'Input' '(' InputParam ')' ';'
          [0013, 0008] (0034,             PR_INPUT) {Input}
          [0013, 0010] (0045,               AB_PAR) {(}
          InputParam = 'id' VectorType InputParamLL
          [0013, 0012] (0001,                   ID) {n}
          VectorType = epsilon
          InputParamLL = epsilon
          [0013, 0014] (0046,              FEC_PAR) {)}
          [0013, 0016] (0049,             TERMINAL) {;}
  14  
  15  		Repeat(Integer i = 0, 1, n) Begin
          Instructions = Command Instructions
          Command = 'Repeat' repeatParams
          [0015, 0009] (0028,            PR_REPEAT) {Repeat}
          Repeat = '(' Integer 'id' '='  Ea ',' Ea repeatStep ')' InternalDecl
          [0015, 0011] (0045,               AB_PAR) {(}
          [0015, 0019] (0029,           PR_INTEGER) {Integer}
          [0015, 0022] (0001,                   ID) {i}
          [0015, 0025] (0007,               OP_ATR) {=}
          Ea = Ta EaLL
          Ta = Pa TaLL
          Pa = Fa PaLL
          Fa = 'CTE_INT'
          [0015, 0028] (0003,              CTE_INT) {0}
          PaLL = epsilon
          TaLL = epsilon
          EaLL = epsilon
          [0015, 0030] (0050,                  SEP) {,}
          Ea = Ta EaLL
          Ta = Pa TaLL
          Pa = Fa PaLL
          Fa = 'CTE_INT'
          [0015, 0033] (0003,              CTE_INT) {1}
          PaLL = epsilon
          TaLL = epsilon
          EaLL = epsilon
          repeatStep = ',' Ea
          [0015, 0035] (0050,                  SEP) {,}
          Ea = Ta EaLL
          Ta = Pa TaLL
          Pa = Fa PaLL
          IdFunctionCall = 'id' IdFunctionCall_LL
          [0015, 0038] (0001,                   ID) {n}
          IdFunctionCall_LL = epsilon
          PaLL = epsilon
          TaLL = epsilon
          EaLL = epsilon
          [0015, 0040] (0046,              FEC_PAR) {)}
          InternalDecl = 'Begin' Instructions 'End'
          [0015, 0047] (0041,             PR_BEGIN) {Begin}
  16  		    total = fibonacci(i);
          Instructions = instructionsLL ';' Instructions
          instructionsLL = 'id' ParamAtrib
          [0016, 0012] (0001,                   ID) {total}
          Atrib = '=' Ec Atrib
          [0016, 0015] (0007,               OP_ATR) {=}
          Ec = Fc EcLL
          Eb = Tb EbLL
          Tb = Fb TbLL
          Fb = Ra FbLL
          Ra = Ea RaLL
          Ea = Ta EaLL
          Ta = Pa TaLL
          Pa = Fa PaLL
          IdFunctionCall = 'id' IdFunctionCall_LL
          [0016, 0026] (0001,                   ID) {fibonacci}
          IdFunctionCall_LL = '(' ParamFunction ')'
          [0016, 0028] (0045,               AB_PAR) {(}
          ParamFunction = Ec ParamFunctionLL
          Ec = Fc EcLL
          Eb = Tb EbLL
          Tb = Fb TbLL
          Fb = Ra FbLL
          Ra = Ea RaLL
          Ea = Ta EaLL
          Ta = Pa TaLL
          Pa = Fa PaLL
          IdFunctionCall = 'id' IdFunctionCall_LL
          [0016, 0030] (0001,                   ID) {i}
          IdFunctionCall_LL = epsilon
          PaLL = epsilon
          TaLL = epsilon
          EaLL = epsilon
          RaLL = epsilon
          FbLL = epsilon
          TbLL = epsilon
          EbLL = epsilon
          EcLL = epsilon
          ParamFunctionLL = epsilon
          [0016, 0032] (0046,              FEC_PAR) {)}
          PaLL = epsilon
          TaLL = epsilon
          EaLL = epsilon
          RaLL = epsilon
          FbLL = epsilon
          TbLL = epsilon
          EbLL = epsilon
          EcLL = epsilon
          Atrib = epsilon
          [0016, 0034] (0049,             TERMINAL) {;}
  17  			Print(total);
          Instructions = Command Instructions
          Command = 'print' '(' 'CTE_CADCHA' PrintParam ')' ';'
          [0017, 0009] (0035,             PR_PRINT) {Print}
          [0017, 0011] (0045,               AB_PAR) {(}
          [0017, 0017] (0001,                   ID) {total}
          PrintParam = epsilon
          [0017, 0019] (0046,              FEC_PAR) {)}
          [0017, 0021] (0049,             TERMINAL) {;}
  18  		End
          Instructions = epsilon
          [0018, 0006] (0042,               PR_END) {End}
  19  
  20  		Refound;
          Instructions = 'Refound' Return ';'
          [0020, 0010] (0024,           PR_REFOUND) {Refound}
          Refound = epsilon
          [0020, 0012] (0049,             TERMINAL) {;}
  21  	End
          [0021, 0005] (0042,               PR_END) {End}
          [0021, 0006] (0000,                  EOF) {EOF}
          S = epsilon
Success 
