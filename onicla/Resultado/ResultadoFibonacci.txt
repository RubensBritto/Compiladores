   1  Function Integer fibonacci(Integer n) Begin
          S = DeclFunction S
          DeclFunction = 'Function' FunctionType NameFunctionId '(' ConstDecl ')' InternalDecl
          [0001, 0001] (0023,              PR_FUNC) {Function}
          Type = 'Integer'
          [0001, 0002] (0029,           PR_INTEGER) {Integer}
          nameFunction = 'id'
          [0001, 0003] (0001,                   ID) {fibonacci}
          [0001, 0004] (0045,               AB_PAR) {(}
          ConstDecl = Type 'id' VectorType ConstDecl_LL
          Type = 'Integer'
          [0001, 0005] (0029,           PR_INTEGER) {Integer}
          [0001, 0006] (0001,                   ID) {n}
          VectorType = epsilon
          [0001, 0007] (0046,              FEC_PAR) {)}
          InternalDecl = 'Begin' Instructions 'End'
          [0001, 0008] (0041,             PR_BEGIN) {Begin}
   2  		If(n < 2) Begin
If
          Instructions = Command Instructions
          Command = 'PR_IF' '(' Eb ')' InternalDecl Ifr
          [0002, 0001] (0025,                PR_IF) {If}
          [0002, 0002] (0045,               AB_PAR) {(}
          Eb = Tb EbLL
          Tb = Fb TbLL
          Fb = Ra FbLL
          Ra = Ea RaLL
          Ea = Ta EaLL
          Ta = Pa TaLL
          Pa = Fa PaLL
          IdFunctionCall = 'id' IdFunctionCall_LL
          [0002, 0003] (0001,                   ID) {n}
          IdFunctionCall_LL = epsilon
          PaLL = epsilon
          TaLL = epsilon
          EaLL = epsilon
          RaLL = epsilon
          FbLL = 'OP_LESS' Ra FbLL
          [0002, 0004] (0016,              OP_LESS) {<}
          Ra = Ea RaLL
          Ea = Ta EaLL
          Ta = Pa TaLL
          Pa = Fa PaLL
          Fa = 'CTE_INT'
          [0002, 0005] (0003,              CTE_INT) {2}
          PaLL = epsilon
          TaLL = epsilon
          EaLL = epsilon
          RaLL = epsilon
          FbLL = epsilon
          TbLL = epsilon
          EbLL = epsilon
          [0002, 0006] (0046,              FEC_PAR) {)}
          InternalDecl = 'Begin' Instructions 'End'
          [0002, 0007] (0041,             PR_BEGIN) {Begin}
   3  			Refound n;
          Instructions = 'Refound' Return ';'
          [0003, 0001] (0024,           PR_REFOUND) {Refound}
          Refound = Ec
          Ec = Fc EcLL
          Eb = Tb EbLL
          Tb = Fb TbLL
          Fb = Ra FbLL
          Ra = Ea RaLL
          Ea = Ta EaLL
          Ta = Pa TaLL
          Pa = Fa PaLL
          IdFunctionCall = 'id' IdFunctionCall_LL
          [0003, 0002] (0001,                   ID) {n}
          IdFunctionCall_LL = epsilon
          PaLL = epsilon
          TaLL = epsilon
          EaLL = epsilon
          RaLL = epsilon
          FbLL = epsilon
          TbLL = epsilon
          EbLL = epsilon
          EcLL = epsilon
          [0003, 0003] (0049,             TERMINAL) {;}
   4  		End
          [0004, 0001] (0042,               PR_END) {End}
   5  		Else Begin
          Ifr = 'PR_ELSE' InternalDecl
          [0005, 0001] (0026,              PR_ELSE) {Else}
          InternalDecl = 'Begin' Instructions 'End'
          [0005, 0002] (0041,             PR_BEGIN) {Begin}
   6  			Refound fibonacci(n - 1) + fibonacci(n - 2);
          Instructions = 'Refound' Return ';'
          [0006, 0001] (0024,           PR_REFOUND) {Refound}
          Refound = Ec
          Ec = Fc EcLL
          Eb = Tb EbLL
          Tb = Fb TbLL
          Fb = Ra FbLL
          Ra = Ea RaLL
          Ea = Ta EaLL
          Ta = Pa TaLL
          Pa = Fa PaLL
          IdFunctionCall = 'id' IdFunctionCall_LL
          [0006, 0002] (0001,                   ID) {fibonacci}
          IdFunctionCall_LL = '(' ParamFunction ')'
          [0006, 0003] (0045,               AB_PAR) {(}
          ParamFunction = Ec ParamFunctionLL
          Ec = Fc EcLL
          Eb = Tb EbLL
          Tb = Fb TbLL
          Fb = Ra FbLL
          Ra = Ea RaLL
          Ea = Ta EaLL
          Ta = Pa TaLL
          Pa = Fa PaLL
          IdFunctionCall = 'id' IdFunctionCall_LL
          [0006, 0004] (0001,                   ID) {n}
          IdFunctionCall_LL = epsilon
          PaLL = epsilon
          TaLL = epsilon
          EaLL = 'OP_SUB' Ta EaLL
          [0006, 0005] (0010,               OP_SUB) {-}
          Ta = Pa TaLL
          Pa = Fa PaLL
          Fa = 'CTE_INT'
          [0006, 0006] (0003,              CTE_INT) {1}
          PaLL = epsilon
          TaLL = epsilon
          EaLL = epsilon
          RaLL = epsilon
          FbLL = epsilon
          TbLL = epsilon
          EbLL = epsilon
          EcLL = epsilon
          ParamFunctionLL = epsilon
          [0006, 0007] (0046,              FEC_PAR) {)}
          PaLL = epsilon
          TaLL = epsilon
          EaLL = 'OP_AD' Ta EaLL
          [0006, 0008] (0009,                OP_AD) {+}
          Ta = Pa TaLL
          Pa = Fa PaLL
          IdFunctionCall = 'id' IdFunctionCall_LL
          [0006, 0009] (0001,                   ID) {fibonacci}
          IdFunctionCall_LL = '(' ParamFunction ')'
          [0006, 0010] (0045,               AB_PAR) {(}
          ParamFunction = Ec ParamFunctionLL
          Ec = Fc EcLL
          Eb = Tb EbLL
          Tb = Fb TbLL
          Fb = Ra FbLL
          Ra = Ea RaLL
          Ea = Ta EaLL
          Ta = Pa TaLL
          Pa = Fa PaLL
          IdFunctionCall = 'id' IdFunctionCall_LL
          [0006, 0011] (0001,                   ID) {n}
          IdFunctionCall_LL = epsilon
          PaLL = epsilon
          TaLL = epsilon
          EaLL = 'OP_SUB' Ta EaLL
          [0006, 0012] (0010,               OP_SUB) {-}
          Ta = Pa TaLL
          Pa = Fa PaLL
          Fa = 'CTE_INT'
          [0006, 0013] (0003,              CTE_INT) {2}
          PaLL = epsilon
          TaLL = epsilon
          EaLL = epsilon
          RaLL = epsilon
          FbLL = epsilon
          TbLL = epsilon
          EbLL = epsilon
          EcLL = epsilon
          ParamFunctionLL = epsilon
          [0006, 0014] (0046,              FEC_PAR) {)}
          PaLL = epsilon
          TaLL = epsilon
          EaLL = epsilon
          RaLL = epsilon
          FbLL = epsilon
          TbLL = epsilon
          EbLL = epsilon
          EcLL = epsilon
          [0006, 0015] (0049,             TERMINAL) {;}
   7  		End
          [0007, 0001] (0042,               PR_END) {End}
   8  	End
          Instructions = epsilon
          [0008, 0001] (0042,               PR_END) {End}
Erro generico
