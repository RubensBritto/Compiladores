   1  Function Integer fibonacci(Integer n) Begin
          S = DeclFunction S
          DeclFunction = 'Function' FunctionType NameFunctionId '(' ConstDecl ')' InternalDecl
          [0001, 0001] (0023,              PR_FUNC) {Function}
          Type = 'Integer'
          [0001, 0002] (0029,           PR_INTEGER) {Integer}
          nameFunction = 'id'
          [0001, 0003] (0001,                   ID) {fibonacci}
          [0001, 0004] (0045,               AB_PAR) {(}
          ConstDecl = Type 'id' VectorType ConstDecl_LL
          Type = 'Integer'
          [0001, 0005] (0029,           PR_INTEGER) {Integer}
          [0001, 0006] (0001,                   ID) {n}
          VectorType = e
          [0001, 0007] (0046,              FEC_PAR) {)}
          InternalDecl = 'Begin' Instructions 'End'
          [0001, 0008] (0041,             PR_BEGIN) {Begin}
   2  		If(n < 2) Begin
If
          Instructions = Command Instructions
          Command = 'PR_IF' '(' Eb ')' InternalDecl Ifr
          [0002, 0001] (0025,                PR_IF) {If}
          [0002, 0002] (0045,               AB_PAR) {(}
          Eb = Tb EbLL
          Tb = Fb TbLL
          Fb = Ra FbLL
          Ra = Ea RaLL
          Ea = Ta EaLL
          Ta = Pa TaLL
          Pa = Fa PaLL
          IdFunctionCall = 'id' IdFunctionCall_LL
          [0002, 0003] (0001,                   ID) {n}
          IdFunctionCall_LL = e
          PaLL = e
          TaLL = e
          EaLL = e
          RaLL = e
          FbLL = 'OP_LESS' Ra FbLL
          [0002, 0004] (0016,              OP_LESS) {<}
          Ra = Ea RaLL
          Ea = Ta EaLL
          Ta = Pa TaLL
          Pa = Fa PaLL
          Fa = 'CTE_INT'
          [0002, 0005] (0003,              CTE_INT) {2}
          PaLL = e
          TaLL = e
          EaLL = e
          RaLL = e
          FbLL = e
          TbLL = e
          EbLL = e
          [0002, 0006] (0046,              FEC_PAR) {)}
          InternalDecl = 'Begin' Instructions 'End'
          [0002, 0007] (0041,             PR_BEGIN) {Begin}
   3  			Refound n;
          Instructions = 'Refound' Return ';'
          [0003, 0001] (0024,           PR_REFOUND) {Refound}
          Refound = Ec
          Ec = Fc EcLL
          Eb = Tb EbLL
          Tb = Fb TbLL
          Fb = Ra FbLL
          Ra = Ea RaLL
          Ea = Ta EaLL
          Ta = Pa TaLL
          Pa = Fa PaLL
          IdFunctionCall = 'id' IdFunctionCall_LL
          [0003, 0002] (0001,                   ID) {n}
          IdFunctionCall_LL = e
          PaLL = e
          TaLL = e
          EaLL = e
          RaLL = e
          FbLL = e
          TbLL = e
          EbLL = e
          EcLL = e
          [0003, 0003] (0049,             TERMINAL) {;}
   4  		End
          [0004, 0001] (0042,               PR_END) {End}
   5  		Else Begin
          Ifr = 'PR_ELSE' InternalDecl
          [0005, 0001] (0026,              PR_ELSE) {Else}
          InternalDecl = 'Begin' Instructions 'End'
          [0005, 0002] (0041,             PR_BEGIN) {Begin}
   6  			Refound fibonacci(n - 1) + fibonacci(n - 2);
          Instructions = 'Refound' Return ';'
          [0006, 0001] (0024,           PR_REFOUND) {Refound}
          Refound = Ec
          Ec = Fc EcLL
          Eb = Tb EbLL
          Tb = Fb TbLL
          Fb = Ra FbLL
          Ra = Ea RaLL
          Ea = Ta EaLL
          Ta = Pa TaLL
          Pa = Fa PaLL
          IdFunctionCall = 'id' IdFunctionCall_LL
          [0006, 0002] (0001,                   ID) {fibonacci}
          IdFunctionCall_LL = '(' ParamFunction ')'
          [0006, 0003] (0045,               AB_PAR) {(}
          ParamFunction = Ec ParamFunctionLL
          Ec = Fc EcLL
          Eb = Tb EbLL
          Tb = Fb TbLL
          Fb = Ra FbLL
          Ra = Ea RaLL
          Ea = Ta EaLL
          Ta = Pa TaLL
          Pa = Fa PaLL
          IdFunctionCall = 'id' IdFunctionCall_LL
          [0006, 0004] (0001,                   ID) {n}
          IdFunctionCall_LL = e
          PaLL = e
          TaLL = e
          EaLL = 'OP_SUB' Ta EaLL
          [0006, 0005] (0010,               OP_SUB) {-}
          Ta = Pa TaLL
          Pa = Fa PaLL
          Fa = 'CTE_INT'
          [0006, 0006] (0003,              CTE_INT) {1}
          PaLL = e
          TaLL = e
          EaLL = e
          RaLL = e
          FbLL = e
          TbLL = e
          EbLL = e
          EcLL = e
          ParamFunctionLL = e
          [0006, 0007] (0046,              FEC_PAR) {)}
          PaLL = e
          TaLL = e
          EaLL = 'OP_AD' Ta EaLL
          [0006, 0008] (0009,                OP_AD) {+}
          Ta = Pa TaLL
          Pa = Fa PaLL
          IdFunctionCall = 'id' IdFunctionCall_LL
          [0006, 0009] (0001,                   ID) {fibonacci}
          IdFunctionCall_LL = '(' ParamFunction ')'
          [0006, 0010] (0045,               AB_PAR) {(}
          ParamFunction = Ec ParamFunctionLL
          Ec = Fc EcLL
          Eb = Tb EbLL
          Tb = Fb TbLL
          Fb = Ra FbLL
          Ra = Ea RaLL
          Ea = Ta EaLL
          Ta = Pa TaLL
          Pa = Fa PaLL
          IdFunctionCall = 'id' IdFunctionCall_LL
          [0006, 0011] (0001,                   ID) {n}
          IdFunctionCall_LL = e
          PaLL = e
          TaLL = e
          EaLL = 'OP_SUB' Ta EaLL
          [0006, 0012] (0010,               OP_SUB) {-}
          Ta = Pa TaLL
          Pa = Fa PaLL
          Fa = 'CTE_INT'
          [0006, 0013] (0003,              CTE_INT) {2}
          PaLL = e
          TaLL = e
          EaLL = e
          RaLL = e
          FbLL = e
          TbLL = e
          EbLL = e
          EcLL = e
          ParamFunctionLL = e
          [0006, 0014] (0046,              FEC_PAR) {)}
          PaLL = e
          TaLL = e
          EaLL = e
          RaLL = e
          FbLL = e
          TbLL = e
          EbLL = e
          EcLL = e
          [0006, 0015] (0049,             TERMINAL) {;}
   7  		End
          [0007, 0001] (0042,               PR_END) {End}
   8  	End
          Instructions = e
          [0008, 0001] (0042,               PR_END) {End}
   9  
  10  	Function Integer Main ( ) Begin
          S = DeclFunction S
          DeclFunction = 'Function' FunctionType NameFunctionId '(' ConstDecl ')' InternalDecl
          [0010, 0001] (0023,              PR_FUNC) {Function}
          Type = 'Integer'
          [0010, 0002] (0029,           PR_INTEGER) {Integer}
          nameFunction = 'main'
          [0010, 0003] (0044,              PR_MAIN) {Main}
          [0010, 0004] (0045,               AB_PAR) {(}
          ConstDecl = e
          [0010, 0005] (0046,              FEC_PAR) {)}
          InternalDecl = 'Begin' Instructions 'End'
          [0010, 0006] (0041,             PR_BEGIN) {Begin}
  11  		Integer n, total;
          Instructions = DeclId Instructions
          DeclId = Type IdLL ';'
          Type = 'Integer'
          [0011, 0001] (0029,           PR_INTEGER) {Integer}
          IdLL = Id '=' Id_LL
          Id = 'id' VectorType
          [0011, 0002] (0001,                   ID) {n}
          VectorType = e
          = = e
          Id_LL = ',' Id '=' Id_LL
          [0011, 0003] (0050,                  SEP) {,}
          Id = 'id' VectorType
          [0011, 0004] (0001,                   ID) {total}
          VectorType = e
          = = e
          Id_LL = e
          [0011, 0005] (0049,             TERMINAL) {;}
  12  		Print('Digite o tamanho da sequencia:');
Print
          Instructions = Command Instructions
          Command = 'print' '(' 'CTE_CADCHA' PrintParam ')' ';'
          [0012, 0001] (0035,             PR_PRINT) {Print}
          [0012, 0002] (0045,               AB_PAR) {(}
          [0012, 0003] (0005,           CTE_CADCHA) {'Digite o tamanho da sequencia:'}
          PrintParam = e
          [0012, 0004] (0046,              FEC_PAR) {)}
          [0012, 0005] (0049,             TERMINAL) {;}
  13  		Input(n);
Input
          Instructions = Command Instructions
          Command = 'Input' '(' InputParam ')' ';'
          [0013, 0001] (0034,             PR_INPUT) {Input}
          [0013, 0002] (0045,               AB_PAR) {(}
          InputParam = 'id' VectorType InputParamLL
          [0013, 0003] (0001,                   ID) {n}
          VectorType = e
          InputParamLL = e
          [0013, 0004] (0046,              FEC_PAR) {)}
          [0013, 0005] (0049,             TERMINAL) {;}
  14  
  15  		Repeat(Integer i = 0, 1, n) Begin
Repeat
          Instructions = Command Instructions
          Command = 'Repeat' repeatParams
          [0015, 0001] (0028,            PR_REPEAT) {Repeat}
          Repeat = '(' Integer 'id' '='  Ea ',' Ea repeatStep ')' InternalDecl
          [0015, 0002] (0045,               AB_PAR) {(}
          [0015, 0003] (0029,           PR_INTEGER) {Integer}
          [0015, 0004] (0001,                   ID) {i}
          [0015, 0005] (0007,               OP_ATR) {=}
          Ea = Ta EaLL
          Ta = Pa TaLL
          Pa = Fa PaLL
          Fa = 'CTE_INT'
          [0015, 0006] (0003,              CTE_INT) {0}
          PaLL = e
          TaLL = e
          EaLL = e
          [0015, 0007] (0050,                  SEP) {,}
          Ea = Ta EaLL
          Ta = Pa TaLL
          Pa = Fa PaLL
          Fa = 'CTE_INT'
          [0015, 0008] (0003,              CTE_INT) {1}
          PaLL = e
          TaLL = e
          EaLL = e
          repeatStep = ',' Ea
          [0015, 0009] (0050,                  SEP) {,}
          Ea = Ta EaLL
          Ta = Pa TaLL
          Pa = Fa PaLL
          IdFunctionCall = 'id' IdFunctionCall_LL
          [0015, 0010] (0001,                   ID) {n}
          IdFunctionCall_LL = e
          PaLL = e
          TaLL = e
          EaLL = e
          [0015, 0011] (0046,              FEC_PAR) {)}
          InternalDecl = 'Begin' Instructions 'End'
          [0015, 0012] (0041,             PR_BEGIN) {Begin}
  16  		    total = fibonacci(i);
          Instructions = instructionsLL ';' Instructions
          instructionsLL = 'id' ParamAttr
          [0016, 0001] (0001,                   ID) {total}
          Atrib = '=' Ec Atrib
          [0016, 0002] (0007,               OP_ATR) {=}
          Ec = Fc EcLL
          Eb = Tb EbLL
          Tb = Fb TbLL
          Fb = Ra FbLL
          Ra = Ea RaLL
          Ea = Ta EaLL
          Ta = Pa TaLL
          Pa = Fa PaLL
          IdFunctionCall = 'id' IdFunctionCall_LL
          [0016, 0003] (0001,                   ID) {fibonacci}
          IdFunctionCall_LL = '(' ParamFunction ')'
          [0016, 0004] (0045,               AB_PAR) {(}
          ParamFunction = Ec ParamFunctionLL
          Ec = Fc EcLL
          Eb = Tb EbLL
          Tb = Fb TbLL
          Fb = Ra FbLL
          Ra = Ea RaLL
          Ea = Ta EaLL
          Ta = Pa TaLL
          Pa = Fa PaLL
          IdFunctionCall = 'id' IdFunctionCall_LL
          [0016, 0005] (0001,                   ID) {i}
          IdFunctionCall_LL = e
          PaLL = e
          TaLL = e
          EaLL = e
          RaLL = e
          FbLL = e
          TbLL = e
          EbLL = e
          EcLL = e
          ParamFunctionLL = e
          [0016, 0006] (0046,              FEC_PAR) {)}
          PaLL = e
          TaLL = e
          EaLL = e
          RaLL = e
          FbLL = e
          TbLL = e
          EbLL = e
          EcLL = e
          Atrib = e
          [0016, 0007] (0049,             TERMINAL) {;}
  17  			Print(total);
Print
          Instructions = Command Instructions
          Command = 'print' '(' 'CTE_CADCHA' PrintParam ')' ';'
          [0017, 0001] (0035,             PR_PRINT) {Print}
          [0017, 0002] (0045,               AB_PAR) {(}
          [0017, 0003] (0001,                   ID) {total}
          PrintParam = e
          [0017, 0004] (0046,              FEC_PAR) {)}
          [0017, 0005] (0049,             TERMINAL) {;}
  18  		End
          Instructions = e
          [0018, 0001] (0042,               PR_END) {End}
  19  
  20  		Refound;
          Instructions = 'Refound' Return ';'
          [0020, 0001] (0024,           PR_REFOUND) {Refound}
          Refound = e
          [0020, 0002] (0049,             TERMINAL) {;}
  21  	End
          [0021, 0001] (0042,               PR_END) {End}
          [0021, 0001] (0000,                  EOF) {EOF}
          S = e
Sucesso 
